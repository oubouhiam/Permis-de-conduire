'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _bluebird = require('bluebird');

var _electronInstallerDebian = require('electron-installer-debian');

var _electronInstallerDebian2 = _interopRequireDefault(_electronInstallerDebian);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _pify = require('pify');

var _pify2 = _interopRequireDefault(_pify);

var _ensureOutput = require('../../util/ensure-output');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function debianArch(nodeArch) {
  switch (nodeArch) {
    case 'ia32':
      return 'i386';
    case 'x64':
      return 'amd64';
    case 'armv7l':
      return 'armhf';
    case 'arm':
      return 'armel';
    default:
      return nodeArch;
  }
}

exports.default = function () {
  var _ref = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee(dir, appName, targetArch, forgeConfig, packageJSON) {
    var arch, outPath, debianDefaults, debianConfig;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            // eslint-disable-line
            arch = debianArch(targetArch);
            outPath = _path2.default.resolve(dir, '../make', packageJSON.name + '_' + packageJSON.version + '_' + arch + '.deb');
            _context.next = 4;
            return (0, _ensureOutput.ensureFile)(outPath);

          case 4:
            debianDefaults = {
              arch: arch,
              dest: _path2.default.dirname(outPath),
              src: dir
            };
            debianConfig = (0, _assign2.default)({}, forgeConfig.electronInstallerDebian, debianDefaults);
            _context.next = 8;
            return (0, _pify2.default)(_electronInstallerDebian2.default)(debianConfig);

          case 8:
            return _context.abrupt('return', [outPath]);

          case 9:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x, _x2, _x3, _x4, _x5) {
    return _ref.apply(this, arguments);
  };
}();