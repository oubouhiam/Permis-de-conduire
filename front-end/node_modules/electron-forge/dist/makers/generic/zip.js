'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _bluebird = require('bluebird');

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _child_process = require('child_process');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _pify = require('pify');

var _pify2 = _interopRequireDefault(_pify);

var _zipFolder = require('zip-folder');

var _zipFolder2 = _interopRequireDefault(_zipFolder);

var _ensureOutput = require('../../util/ensure-output');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var zipPromise = function zipPromise(from, to) {
  return new _promise2.default(function (resolve, reject) {
    var child = (0, _child_process.spawn)('zip', ['-r', '-y', to, _path2.default.basename(from)], {
      cwd: _path2.default.dirname(from)
    });

    child.stdout.on('data', function () {});
    child.stderr.on('data', function () {});

    child.on('close', function (code) {
      if (code === 0) return resolve();
      reject(new Error('Failed to zip, exitted with code: ' + code));
    });
  });
};

exports.default = function () {
  var _ref = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee(dir, appName, targetArch, forgeConfig, packageJSON) {
    var zipPath;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            // eslint-disable-line
            zipPath = _path2.default.resolve(dir, '../make', _path2.default.basename(dir) + '.zip');
            _context.next = 3;
            return (0, _ensureOutput.ensureFile)(zipPath);

          case 3:
            _context.t0 = process.platform;
            _context.next = _context.t0 === 'win32' ? 6 : _context.t0 === 'darwin' ? 9 : _context.t0 === 'linux' ? 12 : 15;
            break;

          case 6:
            _context.next = 8;
            return (0, _pify2.default)(_zipFolder2.default)(dir, zipPath);

          case 8:
            return _context.abrupt('break', 16);

          case 9:
            _context.next = 11;
            return zipPromise(_path2.default.resolve(dir, appName + '.app'), zipPath);

          case 11:
            return _context.abrupt('break', 16);

          case 12:
            _context.next = 14;
            return zipPromise(dir, zipPath);

          case 14:
            return _context.abrupt('break', 16);

          case 15:
            throw new Error('Unrecognized platform');

          case 16:
            return _context.abrupt('return', [zipPath]);

          case 17:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x, _x2, _x3, _x4, _x5) {
    return _ref.apply(this, arguments);
  };
}();