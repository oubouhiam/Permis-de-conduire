'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _bluebird = require('bluebird');

var _electronInstallerDmg = require('electron-installer-dmg');

var _electronInstallerDmg2 = _interopRequireDefault(_electronInstallerDmg);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _pify = require('pify');

var _pify2 = _interopRequireDefault(_pify);

var _ensureOutput = require('../../util/ensure-output');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  var _ref = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee(dir, appName, targetArch, forgeConfig, packageJSON) {
    var outPath, dmgConfig;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            // eslint-disable-line
            outPath = _path2.default.resolve(dir, '../make', appName + '.dmg');
            _context.next = 3;
            return (0, _ensureOutput.ensureFile)(outPath);

          case 3:
            dmgConfig = (0, _assign2.default)({
              overwrite: true
            }, forgeConfig.electronInstallerDMG, {
              appPath: _path2.default.resolve(dir, appName + '.app'),
              name: appName,
              out: _path2.default.dirname(outPath)
            });
            _context.next = 6;
            return (0, _pify2.default)(_electronInstallerDmg2.default)(dmgConfig);

          case 6:
            return _context.abrupt('return', [outPath]);

          case 7:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x, _x2, _x3, _x4, _x5) {
    return _ref.apply(this, arguments);
  };
}();