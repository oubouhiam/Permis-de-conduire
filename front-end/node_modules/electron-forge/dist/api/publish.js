'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _bluebird = require('bluebird');

require('colors');

var _oraHandler = require('../util/ora-handler');

var _oraHandler2 = _interopRequireDefault(_oraHandler);

var _forgeConfig = require('../util/forge-config');

var _forgeConfig2 = _interopRequireDefault(_forgeConfig);

var _readPackageJson = require('../util/read-package-json');

var _readPackageJson2 = _interopRequireDefault(_readPackageJson);

var _requireSearch = require('../util/require-search');

var _requireSearch2 = _interopRequireDefault(_requireSearch);

var _resolveDir = require('../util/resolve-dir');

var _resolveDir2 = _interopRequireDefault(_resolveDir);

var _make = require('./make');

var _make2 = _interopRequireDefault(_make);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @typedef {Object} PublishOptions
 * @property {string} [dir=process.cwd()] The path to the app to be published
 * @property {boolean} [interactive=false] Whether to use sensible defaults or prompt the user visually
 * @property {string} [authToken] An authentication token to use when publishing
 * @property {string} [tag=packageJSON.version] The string to tag this release with
 * @property {string} [target=github] The publish target
 * @property {MakeOptions} [makeOptions] Options object to passed through to make()
 */

/**
 * Publish an Electron application into the given target service.
 *
 * @param {PublishOptions} providedOptions - Options for the Publish method
 * @return {Promise} Will resolve when the publish process is complete
 */
exports.default = function () {
  var _ref = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee2() {
    var providedOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var _Object$assign, dir, interactive, authToken, tag, target, makeOptions, makeResults, artifacts, packageJSON, forgeConfig, publisher;

    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            // eslint-disable-next-line prefer-const, no-unused-vars
            _Object$assign = (0, _assign2.default)({
              dir: process.cwd(),
              interactive: false,
              tag: null,
              makeOptions: {},
              target: 'github'
            }, providedOptions), dir = _Object$assign.dir, interactive = _Object$assign.interactive, authToken = _Object$assign.authToken, tag = _Object$assign.tag, target = _Object$assign.target, makeOptions = _Object$assign.makeOptions;
            _context2.next = 3;
            return (0, _make2.default)((0, _assign2.default)({
              dir: dir,
              interactive: interactive
            }, makeOptions));

          case 3:
            makeResults = _context2.sent;
            _context2.next = 6;
            return (0, _resolveDir2.default)(dir);

          case 6:
            dir = _context2.sent;

            if (dir) {
              _context2.next = 9;
              break;
            }

            throw 'Failed to locate publishable Electron application';

          case 9:
            artifacts = makeResults.reduce(function (accum, arr) {
              accum.push.apply(accum, (0, _toConsumableArray3.default)(arr));
              return accum;
            }, []);
            _context2.next = 12;
            return (0, _readPackageJson2.default)(dir);

          case 12:
            packageJSON = _context2.sent;
            _context2.next = 15;
            return (0, _forgeConfig2.default)(dir);

          case 15:
            forgeConfig = _context2.sent;
            publisher = void 0;
            _context2.next = 19;
            return (0, _oraHandler2.default)('Resolving publish target: ' + ('' + target).cyan, (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee() {
              return _regenerator2.default.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      publisher = (0, _requireSearch2.default)(__dirname, ['../publishers/' + target + '.js', 'electron-forge-publisher-' + target]);

                      if (publisher) {
                        _context.next = 3;
                        break;
                      }

                      throw 'Could not find a publish target with the name: ' + target;

                    case 3:
                    case 'end':
                      return _context.stop();
                  }
                }
              }, _callee, undefined);
            })));

          case 19:
            _context2.next = 21;
            return publisher(artifacts, packageJSON, forgeConfig, authToken, tag);

          case 21:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();