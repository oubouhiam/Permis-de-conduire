'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _bluebird = require('bluebird');

var _electronWinstaller = require('electron-winstaller');

var _fsPromise = require('fs-promise');

var _fsPromise2 = _interopRequireDefault(_fsPromise);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _ensureOutput = require('../../util/ensure-output');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  var _ref = (0, _bluebird.coroutine)(_regenerator2.default.mark(function _callee(dir, appName, targetArch, forgeConfig, packageJSON) {
    var outPath, winstallerConfig, artifacts, deltaPath, msiPath;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            // eslint-disable-line
            outPath = _path2.default.resolve(dir, '../make/squirrel.windows/' + targetArch);
            _context.next = 3;
            return (0, _ensureOutput.ensureDirectory)(outPath);

          case 3:
            winstallerConfig = (0, _assign2.default)({
              name: packageJSON.name,
              noMsi: true
            }, forgeConfig.electronWinstallerConfig, {
              appDirectory: dir,
              outputDirectory: outPath
            });
            _context.next = 6;
            return (0, _electronWinstaller.createWindowsInstaller)(winstallerConfig);

          case 6:
            artifacts = [_path2.default.resolve(outPath, 'RELEASES'), _path2.default.resolve(outPath, winstallerConfig.setupExe || appName + 'Setup.exe'), _path2.default.resolve(outPath, winstallerConfig.name + '-' + packageJSON.version + '-full.nupkg')];
            deltaPath = _path2.default.resolve(outPath, winstallerConfig.name + '-' + packageJSON.version + '-delta.nupkg');
            _context.t0 = winstallerConfig.remoteReleases;

            if (_context.t0) {
              _context.next = 13;
              break;
            }

            _context.next = 12;
            return _fsPromise2.default.exists(deltaPath);

          case 12:
            _context.t0 = _context.sent;

          case 13:
            if (!_context.t0) {
              _context.next = 15;
              break;
            }

            artifacts.push(deltaPath);

          case 15:
            msiPath = _path2.default.resolve(outPath, winstallerConfig.setupMsi || appName + 'Setup.msi');
            _context.t1 = !winstallerConfig.noMsi;

            if (!_context.t1) {
              _context.next = 21;
              break;
            }

            _context.next = 20;
            return _fsPromise2.default.exists(msiPath);

          case 20:
            _context.t1 = _context.sent;

          case 21:
            if (!_context.t1) {
              _context.next = 23;
              break;
            }

            artifacts.push(msiPath);

          case 23:
            return _context.abrupt('return', artifacts);

          case 24:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x, _x2, _x3, _x4, _x5) {
    return _ref.apply(this, arguments);
  };
}();